name: CI/CD
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

on:
  pull_request:
    types: [labeled, unlabeled]
    branches: ['main']
  push:
    branches: [main]

env:
  CI: true
  NODE_ENV: test

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: (github.event.action == 'labeled' && github.event.label.name == 'CI/CD') || (github.event.action == 'unlabeled' && github.event.label.name == 'CI/CD') || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Lint web service
        run: npm run lint --workspace=services/web

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    if: (github.event.action == 'labeled' && github.event.label.name == 'CI/CD') || (github.event.action == 'unlabeled' && github.event.label.name == 'CI/CD') || github.event_name == 'push'
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      RAPIDAPI_KEY_2: ${{ secrets.RAPIDAPI_KEY_2 }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
      MONGODB_COLLECTION: ${{ secrets.MONGODB_COLLECTION }}
      MONGODB_SEARCH_INDEX: ${{ secrets.MONGODB_SEARCH_INDEX }}
      MONGODB_REVIEWS_COLLECTION: ${{ secrets.MONGODB_REVIEWS_COLLECTION }}
      GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
      RECOMMEND_URL: ${{ secrets.RECOMMEND_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install Node.js dependencies
        run: npm ci
      - name: Build web service
        run: npm run build --workspace=services/web

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: (github.event.action == 'labeled' && github.event.label.name == 'CI/CD') || (github.event.action == 'unlabeled' && github.event.label.name == 'CI/CD') || github.event_name == 'push'
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      RAPIDAPI_KEY_2: ${{ secrets.RAPIDAPI_KEY_2 }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
      MONGODB_COLLECTION: ${{ secrets.MONGODB_COLLECTION }}
      MONGODB_SEARCH_INDEX: ${{ secrets.MONGODB_SEARCH_INDEX }}
      MONGODB_REVIEWS_COLLECTION: ${{ secrets.MONGODB_REVIEWS_COLLECTION }}
      GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
      RECOMMEND_URL: ${{ secrets.RECOMMEND_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install Node.js dependencies
        run: npm ci
      - name: Run web service tests
        run: npm run test --workspace=services/web

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: (github.event.action == 'labeled' && github.event.label.name == 'CI/CD') || (github.event.action == 'unlabeled' && github.event.label.name == 'CI/CD') || github.event_name == 'push'
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      RAPIDAPI_KEY_2: ${{ secrets.RAPIDAPI_KEY_2 }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
      MONGODB_COLLECTION: ${{ secrets.MONGODB_COLLECTION }}
      MONGODB_SEARCH_INDEX: ${{ secrets.MONGODB_SEARCH_INDEX }}
      MONGODB_REVIEWS_COLLECTION: ${{ secrets.MONGODB_REVIEWS_COLLECTION }}
      GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
      RECOMMEND_URL: ${{ secrets.RECOMMEND_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Build web service
        run: npm run build --workspace=services/web
      - name: Run E2E tests
        run: npm run test:e2e --workspace=services/web
  deploy:
    needs: [lint, build, test, e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      RAPIDAPI_KEY_2: ${{ secrets.RAPIDAPI_KEY_2 }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
      MONGODB_COLLECTION: ${{ secrets.MONGODB_COLLECTION }}
      MONGODB_SEARCH_INDEX: ${{ secrets.MONGODB_SEARCH_INDEX }}
      MONGODB_REVIEWS_COLLECTION: ${{ secrets.MONGODB_REVIEWS_COLLECTION }}
      GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
      RECOMMEND_URL: ${{ secrets.RECOMMEND_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build web service for production
        run: npm run build --workspace=services/web
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./services/web
